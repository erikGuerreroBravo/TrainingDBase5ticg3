@model TrainingDBase5ticg3.ViewModels.ProfesionesVM

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container-fluid">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="card shadow-lg p-3 mb-5 bg-body rounded">
                <div class="card-header">
                    <div class="card-title">
                        <h4>Profesiones</h4>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-12 col-sm-12 col-md-4 col-lg-4">
                            <label class="text-black">Nombre de la Profesión:</label>
                            @Html.EditorFor(model => model.strValor, new { htmlAttributes = new { @class = "form-control form-control-sm", required = "required" } })
                            @Html.ValidationMessageFor(model => model.strValor, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-12 col-sm-12 col-md-4 col-lg-4">
                            <label class="text-black">Descripción</label>
                            @Html.EditorFor(model => model.strDescripcion, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                            @Html.ValidationMessageFor(model => model.strDescripcion, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 mt-3 d-flex justify-content-start">
                            <input type="submit" value="Crear" class="btn btn-dark btn-group-lg w-25" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Regresar al Listado", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            // Interceptar el envío del formulario
            $('form').submit(function (e) {
                e.preventDefault(); // Evitar el envío tradicional del formulario

                // Validar campos obligatorios
                if ($('#strValor').val().trim() === '') {
                    alert('El campo "Nombre de la Profesión" es obligatorio.');
                    return false;
                }

                // Serializar los datos del formulario
                var formData = $(this).serialize();

                // Enviar los datos mediante AJAX
                $.ajax({
                    url: '@Url.Action("Create", "Profesiones")', // URL del método Create
                    type: 'POST',
                    data: formData,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // Incluir el token anti-falsificación
                    },
                    success: function (response) {
                        if (response.success) {
                            // Redirigir a la acción Index después de una inserción exitosa
                            window.location.href = '@Url.Action("Index", "Profesiones")';
                        } else {
                            // Mostrar mensajes de error si la inserción falla
                            alert(response.message || 'Error al crear la profesión.');
                        }
                    },
                    error: function (xhr, status, error) {
                        // Manejar errores de la solicitud AJAX
                        alert('Ocurrió un error al procesar la solicitud. Por favor, inténtelo de nuevo.');
                        console.error(xhr.responseText);
                    }
                });
            });
        });
    </script>
}
